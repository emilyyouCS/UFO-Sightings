plot(cars)
data <- read.csv("scrubbed.csv", na.strings=c(""," ","NA"), strip.white=TRUE)
#see column names
names(data)
data = subset(data, select = -c(duration..hours.min., date.posted))
names(data)
# is.na(data)
sum(is.na(data))
glimpse(data) #see summary values in data
View(data)
uniq_state_val = list(unique(data$state))
states <- lapply(uniq_state_val, function(x) x[!is.na(x)])
statevec <-unlist(states)
data[data$state %in% statevec,]$country <- "us"
data<-na.omit(data)
data
sum(is.na(data))
uniq_country_val = list(unique(data$country))
uniq_country_val
View(data)
mutate(data, date_time = mdy_hm)
library(dplyr)
mutate(data, date_time = mdy_hm)
mutate(data, date_time = mdy_hm(datetime))
library(lubridate)
install.packages("tidyverse")
library(lubridate)
mutate(data, date_time = mdy_hm(datetime))
transmute(data, date_time = NULL)
transmute(data, datetime = mdy_hm(datetime))
data
transmute(data, datetime = mdy_hm(datetime))
data
mutate(data, year_sighted = year(datetime), month_sighted = month(datetime), day_sighted = day(datetime))
mutate(data, year_sighted = year(datetime))
rlang::last_error()
mutate(data, date_time = mdy_hm(datetime))
mutate(data, year_sighted = year(date_time))
mutate(data, date_time = mdy_hm(datetime))
mutate(data, year_sighted = year(date_time))
mutate(data, date_time = mdy_hm(datetime), year_sighted = year(date_time))
transmute(data, datetime = mdy_hm(datetime), year_sighted = year(datetime))
data
mutate(data, date_time = mdy_hm(datetime), year_sighted = year(date_time), month_sighted = month(date_time), day_sighted = day(datetime))
mutate(data, date_time = mdy_hm(datetime), year_sighted = year(date_time), month_sighted = month(date_time), day_sighted = day(date_time))
data
data <- mutate(data, date_time = mdy_hm(datetime), year_sighted = year(date_time), month_sighted = month(date_time), day_sighted = day(date_time))
data
data <- mutate(data, date_time = mdy_hm(datetime), year_sighted = year(date_time), month_sighted = month(date_time), day_sighted = day(date_time), time_sighted = hm(date_time))
data
data <- mutate(data, datetime = mdy_hm(datetime), year_sighted = year(datetime), month_sighted = month(datetime), day_sighted = day(datetime), time_sighted = hm(datetime))
data
data <- mutate(data, datetime = mdy_hm(datetime), year_sighted = year(datetime), month_sighted = month(datetime), day_sighted = day(datetime), time_sighted = hm(datetime), data_time = NULL)
data
data <- read.csv("scrubbed.csv", na.strings=c(""," ","NA"), strip.white=TRUE)
#see column names
names(data)
data = subset(data, select = -c(duration..hours.min., date.posted))
names(data)
# is.na(data)
sum(is.na(data))
glimpse(data) #see summary values in data
uniq_state_val = list(unique(data$state))
states <- lapply(uniq_state_val, function(x) x[!is.na(x)])
statevec <-unlist(states)
data[data$state %in% statevec,]$country <- "us"
data<-na.omit(data)
data
sum(is.na(data))
uniq_country_val = list(unique(data$country))
uniq_country_val
library(dplyr)
install.packages("tidyverse")
library(lubridate)
#make sure datetime is formatted correctly to be split
#make separate columns for year, month, day, and time in hours:minutes
data <- mutate(data, datetime = mdy_hm(datetime), year_sighted = year(datetime), month_sighted = month(datetime), day_sighted = day(datetime), time_sighted = hm(datetime))
data
plot(cars)
data <- read.csv("scrubbed.csv", na.strings=c(""," ","NA"), strip.white=TRUE)
#see column names
names(data)
data = subset(data, select = -c(duration..hours.min., date.posted))
names(data)
# is.na(data)
sum(is.na(data))
glimpse(data) #see summary values in data
uniq_state_val = list(unique(data$state))
states <- lapply(uniq_state_val, function(x) x[!is.na(x)])
statevec <-unlist(states)
data[data$state %in% statevec,]$country <- "us"
data<-na.omit(data)
data
sum(is.na(data))
uniq_country_val = list(unique(data$country))
uniq_country_val
library(dplyr)
install.packages("tidyverse")
library(lubridate)
#make sure datetime is formatted correctly to be split
#make separate columns for year, month, day, and time in hours
data <- mutate(data, datetime = mdy_hm(datetime), year_sighted = year(datetime), month_sighted = month(datetime), day_sighted = day(datetime), hour_sighted = hour(datetime))
data
shapes <- as.factor(data$shape)
shapes
data$city <- as.factor(data$city)
data$state <- as.factor(data$state)
data$country <- as.factor(data$country)
data$shape <- as.factor(data$shape)
load(tidyverse)
install.packages(tidyverse)
load(tidyverse)
install.packages(tidyverse)
library(tidyverse)
data <- read.csv("scrubbed.csv", na.strings=c(""," ","NA"), strip.white=TRUE)
library(tidyverse)
data <- read.csv("scrubbed.csv", na.strings=c(""," ","NA"), strip.white=TRUE)
data = subset(data, select = -c(city, duration..hours.min., date.posted))
names(data)
# is.na(data)
sum(is.na(data))
glimpse(data) #see summary values in data
uniq_state_val = list(unique(data$state))
states <- lapply(uniq_state_val, function(x) x[!is.na(x)])
statevec <-unlist(states) #creating vector of states from list of states
data[data$state %in% statevec,]$country <- "us"
data<-na.omit(data)
sum(is.na(data)) #checking to see if NA were successfully removed
#splitting datetime
library(lubridate)
library(dplyr)
#make sure datetime is formatted correctly to be split
#make separate columns for year, month, day, and time in hours
data <- mutate(data, datetime = mdy_hm(datetime), year_sighted = year(datetime), month_sighted = month(datetime), day_sighted = day(datetime), hour_sighted = hour(datetime))
data
#time of day
boxplot(data$hour_sighted, horizontal=TRUE, main="Time of day UFOs are seen")
#time of month
boxplot(data$day_sighted, horizontal=TRUE, main="Time of month (by day) UFOs are seen")
#time of year
boxplot(data$month_sighted, horizontal=TRUE, main="Time of year (by month) UFOs are seen")
#time of day
d <- density(data$hour_sighted)
plot(d, type="n", main="UFO reports by time of day (hrs)")
polygon(d, col="green", border="gray")
#time of month
d <- density(data$day_sighted)
plot(d, type="n", main="UFO reports by day of the month")
polygon(d, col="green", border="gray")
#time of year
d <- density(data$month_sighted)
plot(d, type="n", main="UFO reports by month")
polygon(d, col="green", border="gray")
numeric_matrix <-scale(data.matrix(subset(data, select = -c(country, comments))))
numeric_matrix
numeric_matrix <-scale(data.matrix(subset(data, select = -c(country, comments))))
numeric_matrix
numeric_matrix <-scale(data.matrix(subset(data, select = -c(country, comments))))
# numeric_matrix
library(corrplot)
corrplot(cor(numeric_matrix), method="color", addCoef.col = "black",  tl.col="black", tl.srt=45)
heatmap(numeric_matrix)
# set.seed(1)
# rows = sample(1:nrow(numeric_matrix), 1000, replace = TRUE)
# columns = sample(1:ncol(numeric_matrix), 1000, replace = TRUE)
# sample = mapply(function(row, col)
#                            return(numeric_matrix[row,col]),
#                     row = rows, col = columns)
set.seed(1)
rows = sample(1:nrow(numeric_matrix), 1000, replace = TRUE)
columns = sample(1:ncol(numeric_matrix), 1000, replace = TRUE)
sample = mapply(function(row, col)
return(numeric_matrix[row,col]),
row = rows, col = columns)
heatmap(sample)
sample_matrix <-data.matrix(sample)
heatmap(sample_matrix)
dim(sample)
dimnames(sample)
numeric_matrix <-scale(as.matrix(subset(data, select = -c(country, comments))))
numeric_matrix <-scale(data.matrix(subset(data, select = -c(country, comments))))
# numeric_matrix
clusters <- hclust(dist(numeric_matrix))
clusters <- hclust(dist(sample))
plot(clusters)
clusters <- hclust(dist(sample))
plot(clusters)
set.seed(1)
rows = sample(1:nrow(numeric_matrix), 100, replace = TRUE)
columns = sample(1:ncol(numeric_matrix), 100, replace = TRUE)
sample = mapply(function(row, col)
return(numeric_matrix[row,col]),
row = rows, col = columns)
# sample_matrix <-data.matrix(sample)
# heatmap(sample_matrix)
clusters <- hclust(dist(sample))
plot(clusters)
library(factoextra)
res.pca <-princomp(numeric_matrix, cor = FALSE, scores = TRUE)
res.pca
fviz_eig(res.pca)
set.seed(1)
rows = sample(1:nrow(numeric_matrix), 200, replace = TRUE)
columns = sample(1:ncol(numeric_matrix), 200, replace = TRUE)
sample = mapply(function(row, col)
return(numeric_matrix[row,col]),
row = rows, col = columns)
clusters <- hclust(dist(sample))
plot(clusters)
# sample_matrix <-data.matrix(sample)
# heatmap(sample_matrix)
heatmap(cor(sample))
library(tidyverse)
data <- read.csv("scrubbed.csv", na.strings=c(""," ","NA"), strip.white=TRUE)
summary(data)
str(data)
levels(data$state)
levels(data$country)
summary(data$country)
data = subset(data, select = -c(city, duration..hours.min., date.posted))
names(data)
# is.na(data)
sum(is.na(data))
data<-na.omit(data)
sum(is.na(data))
# uniq_state_val = list(unique(data$state))
# states <- lapply(uniq_state_val, function(x) x[!is.na(x)])
# statevec <-unlist(states) #creating vector of states from list of states
# data[data$state %in% statevec,]$country <- "us"
#                  data<-na.omit(data)
#
# sum(is.na(data)) #checking to see if NA were successfully removed
# summary(data$country)
summary(data)
str(data) #de has 0, should drop
#splitting datetime
library(lubridate)
library(dplyr)
#make sure datetime is formatted correctly to be split
#make separate columns for year, month, day, and time in hours
data <- mutate(data, datetime = mdy_hm(datetime), year_sighted = year(datetime), month_sighted = month(datetime), day_sighted = day(datetime), hour_sighted = hour(datetime))
data
#time of day
boxplot(data$hour_sighted, horizontal=TRUE, main="Time of day UFOs are seen")
#time of month
boxplot(data$day_sighted, horizontal=TRUE, main="Time of month (by day) UFOs are seen")
#time of year
boxplot(data$month_sighted, horizontal=TRUE, main="Time of year (by month) UFOs are seen")
#time of day
d <- density(data$hour_sighted)
plot(d, type="n", main="UFO reports by time of day (hrs)")
polygon(d, col="green", border="gray")
#time of month
d <- density(data$day_sighted)
plot(d, type="n", main="UFO reports by day of the month")
polygon(d, col="green", border="gray")
#time of year
d <- density(data$month_sighted)
plot(d, type="n", main="UFO reports by month")
polygon(d, col="green", border="gray")
numeric_matrix <-scale(data.matrix(subset(data, select = -c(comments) )))
# numeric_matrix
summary(numeric_matrix)
library(corrplot)
corrplot(cor(numeric_matrix), method="color", addCoef.col = "black",  tl.col="black", tl.srt=45)
set.seed(1)
rows = sample(1:nrow(numeric_matrix), 200, replace = TRUE)
columns = sample(1:ncol(numeric_matrix), 200, replace = TRUE)
sample = mapply(function(row, col)
return(numeric_matrix[row,col]),
row = rows, col = columns)
library(factoextra)
res.pca <-princomp(numeric_matrix, cor = FALSE, scores = TRUE)
res.pca
fviz_eig(res.pca)
clusters <- hclust(dist(sample))
plot(clusters)
# get reasonably sized data set
set.seed(2)
sample_rows <- sample(1:72734, 1000, replace=FALSE)
kclust_data <- numeric_matrix[sample_rows,]
nrow(numeric_matrix)
set.seed(2)
sample_rows <- sample(1:nrow(numeric_matrix), 1000, replace=FALSE)
kclust_data <- numeric_matrix[sample_rows,]
# determine optimal number of clusters
fviz_nbclust(kclust_data, kmeans, nstart=20, nboot=50, method="gap_stat")
# k-means cluster
km.out <- eclust(kclust_data, FUNcluster="kmeans", k=2, nstart=20)
# k-means cluster
km.out <- eclust(kclust_data, FUNcluster="kmeans", k=3, nstart=20)
# k-means cluster
km.out <- eclust(kclust_data, FUNcluster="kmeans", k=4, nstart=20)
# k-means cluster
km.out <- eclust(kclust_data, FUNcluster="kmeans", k=2, nstart=20)
km.out <- eclust(kclust_data, FUNcluster="kmeans", k=2, nstart=20)
plot(kclust_data, col=(4-km.out$cluster), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
km.out <- eclust(kclust_data, FUNcluster="kmeans", k=4, nstart=20)
plot(kclust_data, col=(4-km.out$cluster), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
km.out <- eclust(kclust_data, FUNcluster="kmeans", k=3, nstart=20)
plot(kclust_data, col=(4-km.out$cluster), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
km.out <- eclust(kclust_data, FUNcluster="kmeans", k=1, nstart=20)
plot(kclust_data, col=(4-km.out$cluster), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
km.out <- eclust(kclust_data, FUNcluster="kmeans", k=2, nstart=20)
plot(kclust_data, col=(4-km.out$cluster), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
